public with sharing class CaseGenerator {
    
    /**
     * Wrapper class for case data from the prompt template
     */
    public class CaseData {
        public String subject;
        public String description;
        public String status; // New, Working, Escalated, Closed
        public String priority; // High, Medium, Low  
        public String origin; // Email, Phone, Web, Chat
        public String type; // Question, Problem, Feature Request
        public String reason; // Installation, Performance, User_Interface, etc.
        public String ownerId; // Current user or queue
        public String suppliedEmail;
        public String suppliedName;
        public String suppliedPhone;
    }
    
    /**
     * Result wrapper for the response
     */
    public class CaseGenerationResult {
        @InvocableVariable public Boolean success;
        @InvocableVariable public String message;
        @InvocableVariable public Integer casesCreated;
        @InvocableVariable public String caseIdList; // Comma-separated list of created IDs
        
        public CaseGenerationResult() {
            this.success = false;
            this.casesCreated = 0;
            this.caseIdList = '';
        }
    }
    
    /**
     * Creates cases from JSON data generated by the prompt template
     * @param contactId The Contact ID to associate cases with
     * @param caseJsonData JSON string containing array of case data
     * @return CaseGenerationResult with success status and created case IDs
     */
    @InvocableMethod(label='Generate Cases from JSON' description='Creates Case records from JSON data for a given contact')
    public static List<CaseGenerationResult> createCasesFromJson(List<CaseGenerationRequest> requests) {
        List<CaseGenerationResult> results = new List<CaseGenerationResult>();
        
        for (CaseGenerationRequest request : requests) {
            CaseGenerationResult result = new CaseGenerationResult();
            
            try {
                // Validate inputs
                if (String.isBlank(request.contactId)) {
                    result.message = 'Contact ID is required';
                    results.add(result);
                    continue;
                }
                
                if (String.isBlank(request.caseJsonData)) {
                    result.message = 'Case JSON data is required';
                    results.add(result);
                    continue;
                }
                
                // Verify contact exists and get associated account
                List<Contact> contacts = [SELECT Id, Name, AccountId, Account.Name FROM Contact WHERE Id = :request.contactId LIMIT 1];
                if (contacts.isEmpty()) {
                    result.message = 'Invalid Contact ID: ' + request.contactId;
                    results.add(result);
                    continue;
                }
                
                Contact contact = contacts[0];
                
                // Parse JSON and create cases
                List<CaseData> caseDataList = (List<CaseData>) JSON.deserialize(
                    request.caseJsonData, 
                    List<CaseData>.class
                );
                
                // Validate case count if provided
                if (request.expectedCaseCount != null && caseDataList.size() != request.expectedCaseCount) {
                    result.message = 'Expected ' + request.expectedCaseCount + ' cases but received ' + caseDataList.size() + ' from prompt template';
                    results.add(result);
                    continue;
                }
                
                List<Case> casesToInsert = new List<Case>();
                
                for (CaseData caseData : caseDataList) {
                    Case newCase = new Case();
                    newCase.ContactId = request.contactId;
                    newCase.AccountId = contact.AccountId; // Get Account from Contact relationship
                    newCase.Subject = caseData.subject;
                    newCase.Description = caseData.description;
                    newCase.Status = String.isNotBlank(caseData.status) ? caseData.status : 'New';
                    newCase.Priority = String.isNotBlank(caseData.priority) ? caseData.priority : 'Medium';
                    newCase.Origin = String.isNotBlank(caseData.origin) ? caseData.origin : 'Web';
                    newCase.Type = caseData.type;
                    newCase.Reason = caseData.reason;
                    
                    // Set owner (defaults to current user if not specified)
                    if (String.isNotBlank(caseData.ownerId)) {
                        newCase.OwnerId = caseData.ownerId;
                    } else {
                        newCase.OwnerId = UserInfo.getUserId();
                    }
                    
                    // Set supplied contact information if provided (can override contact info)
                    if (String.isNotBlank(caseData.suppliedEmail)) {
                        newCase.SuppliedEmail = caseData.suppliedEmail;
                    }
                    
                    if (String.isNotBlank(caseData.suppliedName)) {
                        newCase.SuppliedName = caseData.suppliedName;
                    }
                    
                    if (String.isNotBlank(caseData.suppliedPhone)) {
                        newCase.SuppliedPhone = caseData.suppliedPhone;
                    }
                    
                    casesToInsert.add(newCase);
                }
                
                // Insert cases
                if (!casesToInsert.isEmpty()) {
                    insert casesToInsert;
                    
                    // Collect case IDs for response as comma-separated string
                    List<String> caseIds = new List<String>();
                    for (Case caseRecord : casesToInsert) {
                        caseIds.add(caseRecord.Id);
                    }
                    result.caseIdList = String.join(caseIds, ',');
                    
                    result.success = true;
                    result.casesCreated = casesToInsert.size();
                    String contactText = contact.Name != null ? ' for contact ' + contact.Name : '';
                    String accountText = contact.Account?.Name != null ? ' (' + contact.Account.Name + ')' : '';
                    String industryText = String.isNotBlank(request.industry) ? ' in the ' + request.industry + ' industry' : '';
                    result.message = 'Successfully created ' + casesToInsert.size() + ' cases' + contactText + accountText + industryText;
                } else {
                    result.message = 'No valid case data found in JSON';
                }
                
            } catch (JSONException e) {
                result.message = 'Invalid JSON format: ' + e.getMessage();
                System.debug('JSON parsing error: ' + e.getMessage());
            } catch (DmlException e) {
                result.message = 'Error creating cases: ' + e.getMessage();
                System.debug('DML error: ' + e.getMessage());
            } catch (Exception e) {
                result.message = 'Unexpected error: ' + e.getMessage();
                System.debug('Unexpected error: ' + e.getMessage());
            }
            
            results.add(result);
        }
        
        return results;
    }
    
    /**
     * Input wrapper for the invocable method
     */
    public class CaseGenerationRequest {
        @InvocableVariable(label='Contact ID' description='The Contact ID to create cases for' required=true)
        public String contactId;
        
        @InvocableVariable(label='Case JSON Data' description='JSON array containing case data from prompt template' required=true)
        public String caseJsonData;
        
        @InvocableVariable(label='Expected Case Count' description='Expected number of cases to validate against' required=false)
        public Integer expectedCaseCount;
        
        @InvocableVariable(label='Industry' description='Industry type for logging and validation' required=false)
        public String industry;
    }
}
