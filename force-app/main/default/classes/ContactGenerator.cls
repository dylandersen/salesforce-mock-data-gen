public with sharing class ContactGenerator {
    
    /**
     * Wrapper class for contact data from the prompt template
     */
    public class ContactData {
        public String firstName;
        public String lastName;
        public String title;
        public String phone;
        public String email;
        public String mailingStreet;
        public String mailingCity;
        public String mailingState;
        public String mailingPostalCode;
        public String mailingCountry;
        public String description;
    }
    
    /**
     * Result wrapper for the response
     */
    public class ContactGenerationResult {
        @InvocableVariable public Boolean success;
        @InvocableVariable public String message;
        @InvocableVariable public Integer contactsCreated;
        @InvocableVariable public String contactIdList; // Changed from List<String> to String
        
        public ContactGenerationResult() {
            this.success = false;
            this.contactsCreated = 0;
            this.contactIdList = '';
        }
    }
    
    /**
     * Creates contacts from JSON data generated by the prompt template
     * @param accountId The Account ID to associate contacts with
     * @param contactJsonData JSON string containing array of contact data
     * @return ContactGenerationResult with success status and created contact IDs
     */
    @InvocableMethod(label='Generate Contacts from JSON' description='Creates contacts from JSON data for a given account')
    public static List<ContactGenerationResult> createContactsFromJson(List<ContactGenerationRequest> requests) {
        List<ContactGenerationResult> results = new List<ContactGenerationResult>();
        
        for (ContactGenerationRequest request : requests) {
            ContactGenerationResult result = new ContactGenerationResult();
            
            try {
                // Validate inputs
                if (String.isBlank(request.accountId)) {
                    result.message = 'Account ID is required';
                    results.add(result);
                    continue;
                }
                
                if (String.isBlank(request.contactJsonData)) {
                    result.message = 'Contact JSON data is required';
                    results.add(result);
                    continue;
                }
                
                // Verify account exists
                List<Account> accounts = [SELECT Id, Name FROM Account WHERE Id = :request.accountId LIMIT 1];
                if (accounts.isEmpty()) {
                    result.message = 'Invalid Account ID: ' + request.accountId;
                    results.add(result);
                    continue;
                }
                
                // Parse JSON and create contacts
                List<ContactData> contactDataList = (List<ContactData>) JSON.deserialize(
                    request.contactJsonData, 
                    List<ContactData>.class
                );
                
                // Validate contact count if provided
                if (request.expectedContactCount != null && contactDataList.size() != request.expectedContactCount) {
                    result.message = 'Expected ' + request.expectedContactCount + ' contacts but received ' + contactDataList.size() + ' from prompt template';
                    results.add(result);
                    continue;
                }
                
                List<Contact> contactsToInsert = new List<Contact>();
                
                for (ContactData contactData : contactDataList) {
                    Contact newContact = new Contact();
                    newContact.AccountId = request.accountId;
                    newContact.FirstName = contactData.firstName;
                    newContact.LastName = contactData.lastName;
                    newContact.Title = contactData.title;
                    newContact.Phone = contactData.phone;
                    newContact.Email = contactData.email;
                    newContact.MailingStreet = contactData.mailingStreet;
                    newContact.MailingCity = contactData.mailingCity;
                    newContact.MailingState = contactData.mailingState;
                    newContact.MailingPostalCode = contactData.mailingPostalCode;
                    newContact.MailingCountry = contactData.mailingCountry;
                    newContact.Description = contactData.description;
                    
                    contactsToInsert.add(newContact);
                }
                
                // Insert contacts
                if (!contactsToInsert.isEmpty()) {
                    insert contactsToInsert;
                    
                    // Collect contact IDs for response as comma-separated string
                    List<String> contactIds = new List<String>();
                    for (Contact contact : contactsToInsert) {
                        contactIds.add(contact.Id);
                    }
                    result.contactIdList = String.join(contactIds, ',');
                    
                    result.success = true;
                    result.contactsCreated = contactsToInsert.size();
                    String industryText = String.isNotBlank(request.industry) ? ' in the ' + request.industry + ' industry' : '';
                    result.message = 'Successfully created ' + contactsToInsert.size() + ' contacts' + industryText + ' for account';
                } else {
                    result.message = 'No valid contact data found in JSON';
                }
                
            } catch (JSONException e) {
                result.message = 'Invalid JSON format: ' + e.getMessage();
                System.debug('JSON parsing error: ' + e.getMessage());
            } catch (DmlException e) {
                result.message = 'Error creating contacts: ' + e.getMessage();
                System.debug('DML error: ' + e.getMessage());
            } catch (Exception e) {
                result.message = 'Unexpected error: ' + e.getMessage();
                System.debug('Unexpected error: ' + e.getMessage());
            }
            
            results.add(result);
        }
        
        return results;
    }
    
    /**
     * Input wrapper for the invocable method
     */
    public class ContactGenerationRequest {
        @InvocableVariable(label='Account ID' description='The Account ID to create contacts for' required=true)
        public String accountId;
        
        @InvocableVariable(label='Contact JSON Data' description='JSON array containing contact data from prompt template' required=true)
        public String contactJsonData;
        
        @InvocableVariable(label='Expected Contact Count' description='Expected number of contacts to validate against' required=false)
        public Integer expectedContactCount;
        
        @InvocableVariable(label='Industry' description='Industry type for logging and validation' required=false)
        public String industry;
    }
}
