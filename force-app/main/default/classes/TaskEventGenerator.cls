public with sharing class TaskEventGenerator {
    
    /**
     * Wrapper class for task data from the prompt template
     */
    public class TaskData {
        public String subject;
        public String activityType; // 'Task' or 'Event'
        public String status;
        public String priority;
        public String description;
        public String type;
        public String whatId; // Related record ID
        public String whoId; // Contact/Lead ID (optional)
        public Date activityDate;
        public Time startTime; // For events
        public Integer durationInMinutes; // For events
        public String location; // For events
    }
    
    /**
     * Result wrapper for the response
     */
    public class TaskEventGenerationResult {
        @InvocableVariable public Boolean success;
        @InvocableVariable public String message;
        @InvocableVariable public Integer activitiesCreated;
        @InvocableVariable public String activityIdList; // Comma-separated list of created IDs
        
        public TaskEventGenerationResult() {
            this.success = false;
            this.activitiesCreated = 0;
            this.activityIdList = '';
        }
    }
    
    /**
     * Creates tasks and events from JSON data generated by the prompt template
     * @param recordId The Record ID to associate activities with (Account, Opportunity, etc.)
     * @param activityJsonData JSON string containing array of task/event data
     * @return TaskEventGenerationResult with success status and created activity IDs
     */
    @InvocableMethod(label='Generate Tasks and Events from JSON' description='Creates tasks and events from JSON data for a given record')
    public static List<TaskEventGenerationResult> createActivitiesFromJson(List<TaskEventGenerationRequest> requests) {
        List<TaskEventGenerationResult> results = new List<TaskEventGenerationResult>();
        
        for (TaskEventGenerationRequest request : requests) {
            TaskEventGenerationResult result = new TaskEventGenerationResult();
            
            try {
                // Validate inputs
                if (String.isBlank(request.recordId)) {
                    result.message = 'Record ID is required';
                    results.add(result);
                    continue;
                }
                
                if (String.isBlank(request.activityJsonData)) {
                    result.message = 'Activity JSON data is required';
                    results.add(result);
                    continue;
                }
                
                // Parse JSON and create activities
                List<TaskData> activityDataList = (List<TaskData>) JSON.deserialize(
                    request.activityJsonData, 
                    List<TaskData>.class
                );
                
                // Validate activity count if provided
                if (request.expectedActivityCount != null && activityDataList.size() != request.expectedActivityCount) {
                    result.message = 'Expected ' + request.expectedActivityCount + ' activities but received ' + activityDataList.size() + ' from prompt template';
                    results.add(result);
                    continue;
                }
                
                List<Task> tasksToInsert = new List<Task>();
                List<Event> eventsToInsert = new List<Event>();
                
                for (TaskData activityData : activityDataList) {
                    if (activityData.activityType == 'Event') {
                        Event newEvent = new Event();
                        newEvent.WhatId = request.recordId;
                        newEvent.Subject = activityData.subject;
                        newEvent.Description = activityData.description;
                        newEvent.Type = activityData.type;
                        newEvent.Location = activityData.location;
                        newEvent.WhoId = activityData.whoId;
                        
                        // Set event date and time
                        if (activityData.activityDate != null) {
                            DateTime startDateTime = DateTime.newInstance(
                                activityData.activityDate, 
                                activityData.startTime != null ? activityData.startTime : Time.newInstance(9, 0, 0, 0)
                            );
                            newEvent.StartDateTime = startDateTime;
                            
                            // Set end time based on duration (default 60 minutes)
                            Integer duration = activityData.durationInMinutes != null ? activityData.durationInMinutes : 60;
                            newEvent.EndDateTime = startDateTime.addMinutes(duration);
                        }
                        
                        eventsToInsert.add(newEvent);
                    } else {
                        Task newTask = new Task();
                        newTask.WhatId = request.recordId;
                        newTask.Subject = activityData.subject;
                        newTask.Status = activityData.status;
                        newTask.Priority = activityData.priority;
                        newTask.Description = activityData.description;
                        newTask.Type = activityData.type;
                        newTask.WhoId = activityData.whoId;
                        newTask.ActivityDate = activityData.activityDate;
                        
                        tasksToInsert.add(newTask);
                    }
                }
                
                List<String> activityIds = new List<String>();
                Integer totalCreated = 0;
                
                // Insert tasks
                if (!tasksToInsert.isEmpty()) {
                    insert tasksToInsert;
                    totalCreated += tasksToInsert.size();
                    
                    for (Task task : tasksToInsert) {
                        activityIds.add(task.Id);
                    }
                }
                
                // Insert events
                if (!eventsToInsert.isEmpty()) {
                    insert eventsToInsert;
                    totalCreated += eventsToInsert.size();
                    
                    for (Event event : eventsToInsert) {
                        activityIds.add(event.Id);
                    }
                }
                
                if (totalCreated > 0) {
                    result.activityIdList = String.join(activityIds, ',');
                    result.success = true;
                    result.activitiesCreated = totalCreated;
                    String industryText = String.isNotBlank(request.industry) ? ' in the ' + request.industry + ' industry' : '';
                    result.message = 'Successfully created ' + totalCreated + ' activities' + industryText + ' for record';
                } else {
                    result.message = 'No valid activity data found in JSON';
                }
                
            } catch (JSONException e) {
                result.message = 'Invalid JSON format: ' + e.getMessage();
                System.debug('JSON parsing error: ' + e.getMessage());
            } catch (DmlException e) {
                result.message = 'Error creating activities: ' + e.getMessage();
                System.debug('DML error: ' + e.getMessage());
            } catch (Exception e) {
                result.message = 'Unexpected error: ' + e.getMessage();
                System.debug('Unexpected error: ' + e.getMessage());
            }
            
            results.add(result);
        }
        
        return results;
    }
    
    /**
     * Input wrapper for the invocable method
     */
    public class TaskEventGenerationRequest {
        @InvocableVariable(label='Record ID' description='The Record ID to create activities for (Account, Opportunity, etc.)' required=true)
        public String recordId;
        
        @InvocableVariable(label='Activity JSON Data' description='JSON array containing task/event data from prompt template' required=true)
        public String activityJsonData;
        
        @InvocableVariable(label='Expected Activity Count' description='Expected number of activities to validate against' required=false)
        public Integer expectedActivityCount;
        
        @InvocableVariable(label='Industry' description='Industry type for logging and validation' required=false)
        public String industry;
    }
}
